#!/home/samhaug/anaconda2/bin/python

'''
==============================================================================

File Name : make_wave_glossary.py
Purpose : Make glossary of reverberation waveforms to be used in migration.
          Makes an h5py file with waveforms from 660 reverberations
          Naming scheme: tScS3 is a topside 660 reverberation for ScS3.
Creation Date : 14-03-2017
Last Modified : Tue 14 Mar 2017 10:07:00 AM EDT
Created By : Samuel M. Haugland

==============================================================================
'''

import numpy as np
from matplotlib import pyplot as plt
from subprocess import call
from os import listdir
import h5py
import obspy
import seispy
from obspy.taup import TauPyModel


def main():
    model = TauPyModel('prem_3.0_10')
    st = obspy.read('/home/samhaug/work1/ScS_reverb_sims/mineos/iasp91_okhotsk/st_T.pk')
    net = 'FJ'
    ev = '20160130'
    f = h5py.File('/home/samhaug/work1/ScS_reverb_sims/wave_glossary/iasp_'+net+'_'+ev+'.h5','w')

    st.integrate().detrend()
    st.interpolate(1)
    #st.filter('bandpass',freqmax=1/15.,freqmin=1/70.,zerophase=True)
    st.filter('bandpass',freqmax=1/15.,freqmin=1/75.,zerophase=True)
    st = seispy.data.align_on_phase(st,phase=['ScSScS'],a_min=False)
    st.normalize()


    make_glossary(st[0],f)
    f.close()

def shift_stream(st,shift):
    '''
    Experiment with best temporal offset
    '''

    for idx,tr in enumerate(st):
        st[idx].data = np.roll(tr.data,shift)
    seispy.plot.simple_section(st,a_list=['S'])
    return st

def make_glossary(tr,h5file):

    model = TauPyModel(model='prem_3.0_10')

    def strip_phase(tr,phase,**kwargs):
        window = kwargs.get('window',[-20,120])
        shift = kwargs.get('shift',0)
        model = TauPyModel('iasp91')
        print phase,'s'+phase

        arr = model.get_travel_times(source_depth_in_km=tr.stats.sac['evdp'],
                               distance_in_degree=tr.stats.sac['gcarc'],
                               phase_list = [phase,'s'+phase])
        win_len = np.int(np.abs(arr[1].time-arr[0].time))
        print win_len
        a = seispy.data.phase_window(tr,[phase],window=(-20,win_len+20),model='iasp91')
        return a.data

    t = ['ScSSv660SScS',
         'ScSSv660SScSScS',
         'ScSSv660SScSScSScS']

    b = ['ScS^660ScS',
         'ScS^660ScSScS',
         'ScS^660ScSScSScS']

    tr = seispy.data.tr_align_on_phase(tr,phase=[b[0]])
    h5file.create_dataset('tScS2',data=strip_phase(tr,b[0])*-1)

    tr = seispy.data.tr_align_on_phase(tr,phase=[b[1]])
    h5file.create_dataset('tScS3',data=strip_phase(tr,b[1])*-1)

    tr = seispy.data.tr_align_on_phase(tr,phase=[b[2]])
    h5file.create_dataset('tScS4',data=strip_phase(tr,b[2])*-1)

    tr = seispy.data.tr_align_on_phase(tr,phase=[b[0]])
    h5file.create_dataset('bScS2',data=strip_phase(tr,b[0]))

    tr = seispy.data.tr_align_on_phase(tr,phase=[b[1]])
    h5file.create_dataset('bScS3',data=strip_phase(tr,b[1]))

    tr = seispy.data.tr_align_on_phase(tr,phase=[b[2]])
    h5file.create_dataset('bScS4',data=strip_phase(tr,b[2]))

    #plt.plot(strip_phase(tr,[b[0]],shift=0)*-1))
    #plt.plot(strip_phase(tr,[b[1]],shift=0)*-1))
    #plt.plot(strip_phase(tr,[b[2]],shift=0)*-1))
    #plt.show()
    for keys in h5file:
        if 'b' in keys:
            plt.plot(h5file[keys][...])
    plt.show()

    for keys in h5file:
        if 't' in keys:
            plt.plot(h5file[keys][...])
    plt.show()

main()




