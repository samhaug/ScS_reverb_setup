#!/home/samhaug/anaconda2/bin/python

import obspy
import numpy as np
import seispy
import scipy
from scipy.signal import tukey
from obspy.taup import TauPyModel
from matplotlib import pyplot as plt
from os import listdir
from scipy.signal import correlate

'''
Mask all but zeroth order reverb from synthetic. Subtract from data.
Save higher order reverberations of data
'''

def find_reverb_times(tr,model):
    '''
    Find traveltimes for top and bottomside reverberations at arbitrary depth.
    '''

    evdp = tr.stats.sac['evdp']
    gcarc = tr.stats.sac['gcarc']

    ScS_list = ['ScSScS',
                'ScSScSScS',
                'ScSScSScSScS']

    ScS_arr = model.get_travel_times(source_depth_in_km=evdp,
                               distance_in_degree=gcarc,
                               phase_list = ScS_list)

    return ScS_arr

def strip_reverb(tr,model):
    '''
    Use a tukey window to mask an axisem
    trace and only pass the reverberations
    '''
    sr = tr.stats.sampling_rate
    npts = tr.stats.npts
    masked_trace = tr.copy()
    b = find_reverb_times(tr,model)
    o = tr.stats.sac['o']

    # Strip ScS_2
    t1 = tukey(150,0.2)
    left = np.zeros(int(b[0].time+o-20))
    m1 = np.hstack((left,t1,np.zeros(npts-len(t1)-len(left))))

    # Strip ScS_3
    t2 = tukey(150,0.2)
    left = np.zeros(int(b[1].time+o-20))
    m2 = np.hstack((left,t2,np.zeros(npts-len(left)-len(t2))))

    # Strip ScS_3
    t3 = tukey(150,0.2)
    left = np.zeros(int(b[2].time+o-20))
    m3 = np.hstack((left,t3,np.zeros(npts-len(left)-len(t3))))

    masked_trace.data = tr.data*(m1+m2+m3)

    return masked_trace

def data_setup(data_dir):
    start_time = -400
    print('data_setup')
    st_data = obspy.read(data_dir+'FJ_clean.pk')
    st_data = seispy.data.normalize_on_envelope(st_data,phase=['ScSScS'])
    for idx,tr in enumerate(st_data):
        st_data[idx].stats.location = st_data[idx].stats.sac['gcarc']
        o = tr.stats.sac['o']
        starttime = tr.stats.starttime
        st_data[idx] = seispy.data.phase_window(tr,['ScSScS'],window=(start_time,2050))
        st_data[idx].data += -1*st_data[idx].data.mean()
    st_data.interpolate(1)
    st_data = seispy.data.align_on_phase(st_data,phase=['ScSScS'],a_min=False)
    for idx,tr in enumerate(st_data):
        st_data[idx].stats.sac['o'] += -1*start_time
    st_data.sort(['location'])
    return st_data

def synth_setup(syn_dir,st_data):
    start_time = -400
    print('synth_setup')
    st_syn = obspy.read(syn_dir+'st_T.pk')
    st_syn.filter('bandpass',freqmax=1/25.,freqmin=1/60.)
    st_syn.integrate()
    st_syn = seispy.data.normalize_on_envelope(st_syn,phase=['ScSScS'])
    st_syn = seispy.data.align_on_phase(st_syn,phase=['ScSScS'],a_min=False)
    for idx,tr in enumerate(st_syn):
        st_syn[idx].stats.location = st_syn[idx].stats.sac['gcarc']
        st_syn[idx] = seispy.data.phase_window(tr,['ScSScS'],window=(start_time,2050))
        st_syn[idx].stats.starttime = st_data[idx].stats.starttime
        st_syn[idx].data += -1*st_syn[idx].data.mean()
        st_syn[idx].stats.sac['gcarc'] = st_data[idx].stats.sac['gcarc']
    st_syn.interpolate(1)
    st_syn = seispy.data.align_on_phase(st_syn,phase=['ScSScS'],a_min=False)
    for idx,tr in enumerate(st_syn):
        st_syn[idx].stats.sac['o'] += -1*start_time
    st_syn.sort(['location'])
    return st_syn

def align_synth_data(trd,trs):
    '''
    Align a synthetic with data based on max correlation.
    '''
    corr = scipy.signal.correlate(trd.data,trs.data,mode='same')
    shift = np.argmax(corr)-int(len(trs.data)/2.)
    trs.data = np.roll(trs.data,shift)
    return trs

data_dir = '/home/samhaug/work1/ScS_reverb_data/20160130/'
syn_dir = '/home/samhaug/work1/ScS_reverb_sims/mineos/FJ_v3.0_h6/FJ_3.0_h6_d28/'
model = TauPyModel(model='prem_3.0_10')

std = data_setup(data_dir)
sts = synth_setup(syn_dir,std)
st_mask = sts.copy()

for idx, tr in enumerate(sts):
    m = strip_reverb(sts[idx],model)
    m = align_synth_data(std[idx],m)
    st_mask[idx].data = std[idx].data-m.data

st_mask.write(data_dir+'FJ_mask_stack.pk',format='PICKLE')




