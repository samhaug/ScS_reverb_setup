#!/home/samhaug/anaconda2/bin/python

import numpy as np
from obspy.imaging import beachball
import sympy
from sympy import sin,cos

'''
Take existing CMT moment tensor from CMTSOLUTION file. Perturb elements of
moment tensor by rotating the dip angle. See page 112 of Aki and Richards
2nd edition.
'''

CMTfile = '/home/samhaug/work1/ScS_reverb_data/20160130/CMTSOLUTION'

def read_CMTfile(CMTfile):

    f = open(CMTfile,'r')
    l = f.read().strip().split('\n')
    Mrr = float(l[7].split()[-1])
    Mtt = float(l[8].split()[-1])
    Mpp = float(l[9].split()[-1])
    Mrt = float(l[10].split()[-1])
    Mrp = float(l[11].split()[-1])
    Mtp = float(l[12].split()[-1])
    return [Mrr,Mtt,Mpp,Mrt,Mrp,Mtp]

def perturb_CMT(fm,deldip):

    deldip = np.radians(deldip)
    mt = beachball.MomentTensor(fm[0],fm[1],fm[2],fm[3],fm[4],fm[5],0)
    plane = beachball.mt2plane(mt)
    st = np.radians(plane.strike)
    di = np.radians(plane.dip)
    ra = np.radians(plane.rake)

    '''
    Box 4.4 "Cartesian components of hte moment tensor for a shear dislocation
    of arbitrary orientation" of Aki and Richards. Chap 4. Page 112
    '''

    d,r,s = sympy.symbols('d r s')

    d_Mtt =  -1*(sin(d)*cos(r)*sin(2*s)+sin(2*d)*sin(r)*sin(s)**2)
    d_Mtp =  -1*(sin(d)*cos(r)*cos(2*s)+0.5*sin(2*d)*sin(r)*sin(2*s))
    d_Mtr =  -1*(cos(d)*cos(r)*cos(s)+cos(2*d)*sin(r)*sin(s))
    d_Mpp = (sin(d)*cos(r)*sin(2*s)-sin(2*d)*sin(r)*cos(s)**2)
    d_Mpr = (cos(d)*cos(r)*sin(s)-cos(2*d)*sin(r)*cos(s))
    d_Mrr = sin(2*d)*sin(r)

    dmtt = sympy.diff(d_Mtt,d).evalf(subs={d:di,s:st,r:ra})
    dmtt2 = sympy.diff(d_Mtt,d,2).evalf(subs={d:di,s:st,r:ra})

    dmtp = sympy.diff(d_Mtp,d).evalf(subs={d:di,s:st,r:ra})
    dmtp2 = sympy.diff(d_Mtp,d,2).evalf(subs={d:di,s:st,r:ra})

    dmtr = sympy.diff(d_Mtr,d).evalf(subs={d:di,s:st,r:ra})
    dmtr2 = sympy.diff(d_Mtr,d,2).evalf(subs={d:di,s:st,r:ra})

    dmpp = sympy.diff(d_Mpp,d).evalf(subs={d:di,s:st,r:ra})
    dmpp2 = sympy.diff(d_Mpp,d,2).evalf(subs={d:di,s:st,r:ra})

    dmpr = sympy.diff(d_Mpr,d).evalf(subs={d:di,s:st,r:ra})
    dmpr2 = sympy.diff(d_Mpr,d,2).evalf(subs={d:di,s:st,r:ra})

    dmrr = sympy.diff(d_Mrr,d).evalf(subs={d:di,s:st,r:ra})
    dmrr2 = sympy.diff(d_Mrr,d,2).evalf(subs={d:di,s:st,r:ra})

    r_fm = []
    r_fm.append(float(fm[0] + dmrr*deldip*1e26+0.5*dmrr2*deldip**2*1e26))
    r_fm.append(float(fm[1] + dmtt*deldip*1e26+0.5*dmtt2*deldip**2*1e26))
    r_fm.append(float(fm[2] + dmpp*deldip*1e26+0.5*dmpp2*deldip**2*1e26))
    r_fm.append(float(fm[3] + dmtr*deldip*1e26+0.5*dmtr2*deldip**2*1e26))
    r_fm.append(float(fm[4] + dmpr*deldip*1e26+0.5*dmpr2*deldip**2*1e26))
    r_fm.append(float(fm[5] + dmtp*deldip*1e26+0.5*dmtp2*deldip**2*1e26))

    #mt = beachball.MomentTensor(r_fm[0],r_fm[1],r_fm[2],r_fm[3],r_fm[4],r_fm[5],0)
    #plane = beachball.mt2plane(mt)
    #beachball.beachball(plane)
    rmt = beachball.MomentTensor(r_fm[0],r_fm[1],r_fm[2],r_fm[3],r_fm[4],r_fm[5],0)
    #print r_fm
    #print fm
    plane = beachball.mt2plane(rmt)
    beachball.beachball(r_fm)
    print np.degrees(st),np.degrees(di),np.degrees(ra)
    print plane.strike,plane.dip,plane.rake
    beachball.beachball(fm)

fm = read_CMTfile(CMTfile)
perturb_CMT(fm,-50)


